import * as path from "node:path";

/** @param {import('./index.d.ts').AdapterOptions} options */
export default function (options = {}) {
	/** @type {import('@sveltejs/kit').Adapter} */
	const adapter = {
		name: "svelte-kit-bun",
		supports: {
			// well if node can, then bun can too
			read: () => true,
		},
		async emulate() {
			return {
				platform({ config, prerender }) {
					return {
						/** @type {import('bun').Server} - we type it here to get rid of the TS error */
						get server() {
							// TODO: figure out how/if it could work in dev mode
							throw new Error("Currently not available in dev mode.");
						},
					};
				},
			};
		},
		async adapt(builder) {
			// Prepare the temp directory
			const tmp = builder.getBuildDirectory("bun-tmp");
			builder.rimraf(tmp);
			builder.mkdirp(tmp);

			// Copy the static files (static, prerendered and compiled client)
			const client_dir = `${tmp}/client`;
			builder.mkdirp(client_dir);
			builder.writeClient(client_dir);
			builder.writePrerendered(client_dir);

			// Copy the server files (to be bundled with Bun)
			const server_dir = `${tmp}/server`;
			builder.mkdirp(server_dir);
			builder.writeServer(server_dir);

			// Make the information about prerendered stringifiable
			const prerendered = {
				assets: [...builder.prerendered.assets.entries()],
				redirects: [...builder.prerendered.redirects.entries()],
				pages: [...builder.prerendered.pages.entries()],
			};

			// Copy the entry point (to be bundled with Bun)
			const sk_server_relative_path = path.posix.relative(tmp, builder.getServerDirectory());
			builder.copy(`${import.meta.dir}/src/index.js`, `${tmp}/index.js`, {
				replace: {
					SERVER: `${sk_server_relative_path}/index.js`,
					MANIFEST: builder.generateManifest({ relativePath: sk_server_relative_path }),
					PRERENDERED: JSON.stringify(prerendered),
					APP_PATH: JSON.stringify(builder.getAppPath()),
				},
			});

			// Prepare the final directory
			const final = builder.getBuildDirectory("bun");
			builder.rimraf(final);
			builder.mkdirp(final);

			// Copy the static files (static, prerendered and compiled client) (Bun doesn't copy them during bundling, but entrypoint expects them to be there)
			builder.writeClient(`${final}/client`);
			builder.writePrerendered(`${final}/client`);

			await Bun.build({
				entrypoints: [`${tmp}/index.js`],
				outdir: final,
				target: "bun",
				minify: true,
				banner: `
// This file was generated by svelte-kit-bun
// https://github.com/mastermakrela/svelte-kit-bun
`,
			});
		},
	};

	return adapter;
}
